/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isnan = require('@stdlib/math/base/assert/is-nan');
var sqrt = require('@stdlib/math/base/special/sqrt');
var abs = require('@stdlib/math/base/special/abs');
var ln = require('@stdlib/math/base/special/ln');
const log1p = require('@stdlib/math/base/special/log1p');
const sqrt1pm1 = require('@stdlib/math/base/special/sqrt1pm1');


// VARIABLES //

var HUGE = 1 << 22; // 2**22


// MAIN //

/**
* Computes the hyperbolic arccosecant of a number.
*
* ## Method
*
* Based on
*
* ```tex
* \operatorname{acsch}(x) = \log \left[ 1/x + \sqrt{ 1/x^2 + 1 } \right]
* ```
*
* we have
*
* ```tex
* \operatorname{acsch}(x) = \begin{cases}
* \log(x) + \tfrac{\ln}{2} & \text{ if x is large } \\
* \log \left( 2x-\tfrac{1}{\sqrt{x^2-1}+x} \right) & \text{ if } x > 2 \\
* \end{cases}
* ```
*
* ## Special Cases
*
* ```tex
* \begin{align*}
* \operatorname{acsch}(x) &= \mathrm{NaN}\ \text{ if } x < 1 \\
* \end{align*}
* ```
*
* @param {number} x - input value
* @returns {number} hyperbolic arccosecant (in radians)
*
* @example
* var v = acsch( 0 );
* // returns NaN
*
* @example
* var v = acsch( -1.0 );
* // returns ~-0.881
*
* @example
* var v = acsch( 1.0 );
* // returns ~0.881
*/
function acsch(x) {
	if (isnan(x)) {
		return NaN;
	}
	if (x == 0.0) {
		return NaN;
	}
	let t = abs(x)
	let sign = (x < 0 ? -1 : 1);
	if (t >= HUGE) {
		return log1p(1 / t) * sign;
	}
	if (t > 0 && t < 1) {
		return ln(1 / t + sqrt(1 / (t * t) + 1)) * sign;
	}
	return log1p(1 / t + sqrt1pm1(1 / (t * t))) * sign;
}


// EXPORTS //

module.exports = acsch;
